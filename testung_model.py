# -*- coding: utf-8 -*-
"""testung_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m1Az64hZxjXZlO8adsXD5_57uti51CmE
"""

import tensorflow as tf
from tensorflow.keras.models import load_model
from PIL import Image
import numpy as np
from google.colab import files
import os

img_width = 160
img_height=160
class_name = ["Airpods","Box"]

print("Upload image:")
uploaded = files.upload()
img_path = list(uploaded.keys())[0] # Corrected to use .keys()

model = load_model('/content/airpod_box_classifier.h5')

def test_imh(model,img_path):
  img = Image.open(img_path).resize((img_height,img_width)) # Corrected resize argument
  img_array = np.array(img); # Corrected variable name
  img_array = np.expand_dims(img_array, axis=0)  # Shape: (1, 160, 160, 3)

  prediction= model.predict(img_array) # Use img_array for prediction
  class_idx = np.argmax(prediction)
  # Corrected to use class_idx for class_label and access class_name list
  class_label = class_name[class_idx]
  # Removed the incorrect output_label logic

  print(f"Image: {img_path}")
  print(f"Prediction: {class_label}") # Use class_label
  print(f"Probabilities: {prediction}")
  print(f"Class index: {class_idx} ({class_label})") # Use class_label
  return class_label # Return class_label


# Test the image
test_imh(model, img_path)

# prompt: make an good GUI using gradio which uses the model and allows users to input the image and it should predict using the model and show to user

!pip install -q gradio

import gradio as gr

def predict_image(image):
  img = Image.fromarray(image).resize((img_height, img_width))
  img_array = np.array(img)
  img_array = np.expand_dims(img_array, axis=0)

  prediction = model.predict(img_array)
  class_idx = np.argmax(prediction)
  class_label = class_name[class_idx]
  confidence = float(np.max(prediction))

  return f"Prediction: {class_label} (Confidence: {confidence:.2f})"

# Create the Gradio interface
gr.Interface(fn=predict_image,
             inputs=gr.Image(type="numpy"),
             outputs="text",
             title="Airpod/Box Image Classifier",
             description="Upload an image of an Airpod or a Box to get a prediction.").launch(debug=True)